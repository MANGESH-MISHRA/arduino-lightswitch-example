/** Generated by YAKINDU Statechart Tools code generator. */

#include "Lightswitch.h"

/*! \file Implementation of the state machine 'lightswitch'
*/


const sc_integer Lightswitch::DefaultSCI::time_s = 30;



Lightswitch::Lightswitch()  :
timer(sc_null),
stateConfVectorPosition(0),
iface(this)
{
}

Lightswitch::~Lightswitch()
{
}






void Lightswitch::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = Lightswitch_last_state;
	
	stateConfVectorPosition = 0;

	clearInEvents();
	clearOutEvents();
	
	/* Default init sequence for statechart lightswitch */
	iface.light = false;
	iface.led_timer = false;
	iface.led_motion = false;
}

void Lightswitch::enter()
{
	/* Default enter sequence for statechart lightswitch */
	enseq_lightswitch_default();
}

void Lightswitch::exit()
{
	/* Default exit sequence for statechart lightswitch */
	exseq_lightswitch();
}

sc_boolean Lightswitch::isActive() const
{
	return stateConfVector[0] != Lightswitch_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Lightswitch::isFinal() const
{
   return false;}

void Lightswitch::runCycle()
{
	
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case lightswitch_Off :
		{
			lightswitch_Off_react(true);
			break;
		}
		case lightswitch_Timer :
		{
			lightswitch_Timer_react(true);
			break;
		}
		case lightswitch_Motion_Automatic_motion_Motion :
		{
			lightswitch_Motion_Automatic_motion_Motion_react(true);
			break;
		}
		case lightswitch_Motion_Automatic_motion_No_Motion :
		{
			lightswitch_Motion_Automatic_motion_No_Motion_react(true);
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void Lightswitch::clearInEvents()
{
	iface.button_raised = false;
	iface.motion_raised = false;
	timeEvents[0] = false; 
	timeEvents[1] = false; 
}

void Lightswitch::clearOutEvents()
{
}


void Lightswitch::setTimer(TimerInterface* timerInterface)
{
	this->timer = timerInterface;
}

TimerInterface* Lightswitch::getTimer()
{
	return timer;
}

sc_integer Lightswitch::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void Lightswitch::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		*(sc_boolean*)evid = true;
		runCycle();
	}
}

sc_boolean Lightswitch::isStateActive(LightswitchStates state) const
{
	switch (state)
	{
		case lightswitch_Off : 
			return (sc_boolean) (stateConfVector[SCVI_LIGHTSWITCH_OFF] == lightswitch_Off
			);
		case lightswitch_Timer : 
			return (sc_boolean) (stateConfVector[SCVI_LIGHTSWITCH_TIMER] == lightswitch_Timer
			);
		case lightswitch_Motion_Automatic : 
			return (sc_boolean) (stateConfVector[SCVI_LIGHTSWITCH_MOTION_AUTOMATIC] >= lightswitch_Motion_Automatic
				&& stateConfVector[SCVI_LIGHTSWITCH_MOTION_AUTOMATIC] <= lightswitch_Motion_Automatic_motion_No_Motion);
		case lightswitch_Motion_Automatic_motion_Motion : 
			return (sc_boolean) (stateConfVector[SCVI_LIGHTSWITCH_MOTION_AUTOMATIC_MOTION_MOTION] == lightswitch_Motion_Automatic_motion_Motion
			);
		case lightswitch_Motion_Automatic_motion_No_Motion : 
			return (sc_boolean) (stateConfVector[SCVI_LIGHTSWITCH_MOTION_AUTOMATIC_MOTION_NO_MOTION] == lightswitch_Motion_Automatic_motion_No_Motion
			);
		default: return false;
	}
}

Lightswitch::DefaultSCI* Lightswitch::getDefaultSCI()
{
	return &iface;
}
/* Functions for event button in interface DefaultSCI */
void Lightswitch::DefaultSCI::raise_button()
{
	button_raised = true;
	
	parent->runCycle();
}
void Lightswitch::raise_button()
{
	iface.raise_button();
}
/* Functions for event motion in interface DefaultSCI */
void Lightswitch::DefaultSCI::raise_motion()
{
	motion_raised = true;
	
	parent->runCycle();
}
void Lightswitch::raise_motion()
{
	iface.raise_motion();
}
sc_integer Lightswitch::DefaultSCI::get_time_s() const
{
	return time_s;
}

sc_integer Lightswitch::get_time_s() const
{
	return Lightswitch::DefaultSCI::time_s;
}

sc_boolean Lightswitch::DefaultSCI::get_light() const
{
	return light;
}

sc_boolean Lightswitch::get_light() const
{
	return iface.light;
}

void Lightswitch::DefaultSCI::set_light(sc_boolean value)
{
	light = value;
}

void Lightswitch::set_light(sc_boolean value)
{
	iface.light = value;
}

sc_boolean Lightswitch::DefaultSCI::get_led_timer() const
{
	return led_timer;
}

sc_boolean Lightswitch::get_led_timer() const
{
	return iface.led_timer;
}

void Lightswitch::DefaultSCI::set_led_timer(sc_boolean value)
{
	led_timer = value;
}

void Lightswitch::set_led_timer(sc_boolean value)
{
	iface.led_timer = value;
}

sc_boolean Lightswitch::DefaultSCI::get_led_motion() const
{
	return led_motion;
}

sc_boolean Lightswitch::get_led_motion() const
{
	return iface.led_motion;
}

void Lightswitch::DefaultSCI::set_led_motion(sc_boolean value)
{
	led_motion = value;
}

void Lightswitch::set_led_motion(sc_boolean value)
{
	iface.led_motion = value;
}


// implementations of all internal functions

/* Entry action for state 'Off'. */
void Lightswitch::enact_lightswitch_Off()
{
	/* Entry action for state 'Off'. */
	iface.light = false;
}

/* Entry action for state 'Timer'. */
void Lightswitch::enact_lightswitch_Timer()
{
	/* Entry action for state 'Timer'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[0]), (Lightswitch::DefaultSCI::time_s * 1000), false);
	iface.led_timer = true;
	iface.light = true;
}

/* Entry action for state 'Motion_Automatic'. */
void Lightswitch::enact_lightswitch_Motion_Automatic()
{
	/* Entry action for state 'Motion_Automatic'. */
	iface.led_motion = true;
}

/* Entry action for state 'Motion'. */
void Lightswitch::enact_lightswitch_Motion_Automatic_motion_Motion()
{
	/* Entry action for state 'Motion'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[1]), (Lightswitch::DefaultSCI::time_s * 1000), false);
	iface.light = true;
}

/* Entry action for state 'No_Motion'. */
void Lightswitch::enact_lightswitch_Motion_Automatic_motion_No_Motion()
{
	/* Entry action for state 'No_Motion'. */
	iface.light = false;
}

/* Exit action for state 'Timer'. */
void Lightswitch::exact_lightswitch_Timer()
{
	/* Exit action for state 'Timer'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
	iface.led_timer = false;
}

/* Exit action for state 'Motion_Automatic'. */
void Lightswitch::exact_lightswitch_Motion_Automatic()
{
	/* Exit action for state 'Motion_Automatic'. */
	iface.led_motion = false;
}

/* Exit action for state 'Motion'. */
void Lightswitch::exact_lightswitch_Motion_Automatic_motion_Motion()
{
	/* Exit action for state 'Motion'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
}

/* 'default' enter sequence for state Off */
void Lightswitch::enseq_lightswitch_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_lightswitch_Off();
	stateConfVector[0] = lightswitch_Off;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Timer */
void Lightswitch::enseq_lightswitch_Timer_default()
{
	/* 'default' enter sequence for state Timer */
	enact_lightswitch_Timer();
	stateConfVector[0] = lightswitch_Timer;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Motion_Automatic */
void Lightswitch::enseq_lightswitch_Motion_Automatic_default()
{
	/* 'default' enter sequence for state Motion_Automatic */
	enact_lightswitch_Motion_Automatic();
	enseq_lightswitch_Motion_Automatic_motion_default();
}

/* 'default' enter sequence for state Motion */
void Lightswitch::enseq_lightswitch_Motion_Automatic_motion_Motion_default()
{
	/* 'default' enter sequence for state Motion */
	enact_lightswitch_Motion_Automatic_motion_Motion();
	stateConfVector[0] = lightswitch_Motion_Automatic_motion_Motion;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state No_Motion */
void Lightswitch::enseq_lightswitch_Motion_Automatic_motion_No_Motion_default()
{
	/* 'default' enter sequence for state No_Motion */
	enact_lightswitch_Motion_Automatic_motion_No_Motion();
	stateConfVector[0] = lightswitch_Motion_Automatic_motion_No_Motion;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region lightswitch */
void Lightswitch::enseq_lightswitch_default()
{
	/* 'default' enter sequence for region lightswitch */
	react_lightswitch__entry_Default();
}

/* 'default' enter sequence for region motion */
void Lightswitch::enseq_lightswitch_Motion_Automatic_motion_default()
{
	/* 'default' enter sequence for region motion */
	react_lightswitch_Motion_Automatic_motion__entry_Default();
}

/* Default exit sequence for state Off */
void Lightswitch::exseq_lightswitch_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[0] = Lightswitch_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Timer */
void Lightswitch::exseq_lightswitch_Timer()
{
	/* Default exit sequence for state Timer */
	stateConfVector[0] = Lightswitch_last_state;
	stateConfVectorPosition = 0;
	exact_lightswitch_Timer();
}

/* Default exit sequence for state Motion_Automatic */
void Lightswitch::exseq_lightswitch_Motion_Automatic()
{
	/* Default exit sequence for state Motion_Automatic */
	exseq_lightswitch_Motion_Automatic_motion();
	exact_lightswitch_Motion_Automatic();
}

/* Default exit sequence for state Motion */
void Lightswitch::exseq_lightswitch_Motion_Automatic_motion_Motion()
{
	/* Default exit sequence for state Motion */
	stateConfVector[0] = Lightswitch_last_state;
	stateConfVectorPosition = 0;
	exact_lightswitch_Motion_Automatic_motion_Motion();
}

/* Default exit sequence for state No_Motion */
void Lightswitch::exseq_lightswitch_Motion_Automatic_motion_No_Motion()
{
	/* Default exit sequence for state No_Motion */
	stateConfVector[0] = Lightswitch_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for region lightswitch */
void Lightswitch::exseq_lightswitch()
{
	/* Default exit sequence for region lightswitch */
	/* Handle exit of all possible states (of lightswitch.lightswitch) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case lightswitch_Off :
		{
			exseq_lightswitch_Off();
			break;
		}
		case lightswitch_Timer :
		{
			exseq_lightswitch_Timer();
			break;
		}
		case lightswitch_Motion_Automatic_motion_Motion :
		{
			exseq_lightswitch_Motion_Automatic_motion_Motion();
			exact_lightswitch_Motion_Automatic();
			break;
		}
		case lightswitch_Motion_Automatic_motion_No_Motion :
		{
			exseq_lightswitch_Motion_Automatic_motion_No_Motion();
			exact_lightswitch_Motion_Automatic();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region motion */
void Lightswitch::exseq_lightswitch_Motion_Automatic_motion()
{
	/* Default exit sequence for region motion */
	/* Handle exit of all possible states (of lightswitch.lightswitch.Motion_Automatic.motion) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case lightswitch_Motion_Automatic_motion_Motion :
		{
			exseq_lightswitch_Motion_Automatic_motion_Motion();
			break;
		}
		case lightswitch_Motion_Automatic_motion_No_Motion :
		{
			exseq_lightswitch_Motion_Automatic_motion_No_Motion();
			break;
		}
		default: break;
	}
}

/* Default react sequence for initial entry  */
void Lightswitch::react_lightswitch__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_lightswitch_Off_default();
}

/* Default react sequence for initial entry  */
void Lightswitch::react_lightswitch_Motion_Automatic_motion__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_lightswitch_Motion_Automatic_motion_Motion_default();
}

sc_boolean Lightswitch::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean Lightswitch::lightswitch_Off_react(const sc_boolean try_transition) {
	/* The reactions of state Off. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if (iface.button_raised)
		{ 
			exseq_lightswitch_Off();
			enseq_lightswitch_Timer_default();
			react();
		}  else
		{
			did_transition = false;
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = react();
	} 
	return did_transition;
}

sc_boolean Lightswitch::lightswitch_Timer_react(const sc_boolean try_transition) {
	/* The reactions of state Timer. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if (iface.button_raised)
		{ 
			exseq_lightswitch_Timer();
			enseq_lightswitch_Motion_Automatic_default();
			react();
		}  else
		{
			if (timeEvents[0])
			{ 
				exseq_lightswitch_Timer();
				enseq_lightswitch_Off_default();
				react();
			}  else
			{
				did_transition = false;
			}
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = react();
	} 
	return did_transition;
}

sc_boolean Lightswitch::lightswitch_Motion_Automatic_react(const sc_boolean try_transition) {
	/* The reactions of state Motion_Automatic. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if (iface.button_raised)
		{ 
			exseq_lightswitch_Motion_Automatic();
			enseq_lightswitch_Timer_default();
			react();
		}  else
		{
			did_transition = false;
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = react();
	} 
	return did_transition;
}

sc_boolean Lightswitch::lightswitch_Motion_Automatic_motion_Motion_react(const sc_boolean try_transition) {
	/* The reactions of state Motion. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if (timeEvents[1])
		{ 
			exseq_lightswitch_Motion_Automatic_motion_Motion();
			enseq_lightswitch_Motion_Automatic_motion_No_Motion_default();
			lightswitch_Motion_Automatic_react(false);
		}  else
		{
			if (iface.motion_raised)
			{ 
				exseq_lightswitch_Motion_Automatic_motion_Motion();
				enseq_lightswitch_Motion_Automatic_motion_Motion_default();
			}  else
			{
				did_transition = false;
			}
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = lightswitch_Motion_Automatic_react(try_transition);
	} 
	return did_transition;
}

sc_boolean Lightswitch::lightswitch_Motion_Automatic_motion_No_Motion_react(const sc_boolean try_transition) {
	/* The reactions of state No_Motion. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if (iface.motion_raised)
		{ 
			exseq_lightswitch_Motion_Automatic_motion_No_Motion();
			enseq_lightswitch_Motion_Automatic_motion_Motion_default();
			lightswitch_Motion_Automatic_react(false);
		}  else
		{
			did_transition = false;
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = lightswitch_Motion_Automatic_react(try_transition);
	} 
	return did_transition;
}



