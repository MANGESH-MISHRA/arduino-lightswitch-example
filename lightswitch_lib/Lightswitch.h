/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef LIGHTSWITCH_H_
#define LIGHTSWITCH_H_


#include "sc_types.h"
#include "StatemachineInterface.h"
#include "TimedStatemachineInterface.h"

/*! \file Header of the state machine 'lightswitch'.
*/




/*! Define indices of states in the StateConfVector */
#define SCVI_LIGHTSWITCH_OFF 0
#define SCVI_LIGHTSWITCH_TIMER 0
#define SCVI_LIGHTSWITCH_MOTION_AUTOMATIC 0
#define SCVI_LIGHTSWITCH_MOTION_AUTOMATIC_MOTION_MOTION 0
#define SCVI_LIGHTSWITCH_MOTION_AUTOMATIC_MOTION_NO_MOTION 0


class Lightswitch : public TimedStatemachineInterface, public StatemachineInterface
{
	public:
		Lightswitch();
		
		~Lightswitch();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Lightswitch_last_state,
			lightswitch_Off,
			lightswitch_Timer,
			lightswitch_Motion_Automatic,
			lightswitch_Motion_Automatic_motion_Motion,
			lightswitch_Motion_Automatic_motion_No_Motion
		} LightswitchStates;
					
		static const sc_integer numStates = 5;
		
		//! Inner class for default interface scope.
		class DefaultSCI
		{
			public:
				DefaultSCI(Lightswitch * parent):
					button_raised(false),
					motion_raised(false),
					parent(parent)
				{}
				
				/*! Gets the value of the variable 'time_s' that is defined in the default interface scope. */
				sc_integer get_time_s() const;
				
				
				/*! Raises the in event 'button' that is defined in the default interface scope. */
				void raise_button();
				
				
				/*! Raises the in event 'motion' that is defined in the default interface scope. */
				void raise_motion();
				
				
				/*! Gets the value of the variable 'light' that is defined in the default interface scope. */
				sc_boolean get_light() const;
				
				/*! Sets the value of the variable 'light' that is defined in the default interface scope. */
				void set_light(sc_boolean value);
				
				
				/*! Gets the value of the variable 'led_timer' that is defined in the default interface scope. */
				sc_boolean get_led_timer() const;
				
				/*! Sets the value of the variable 'led_timer' that is defined in the default interface scope. */
				void set_led_timer(sc_boolean value);
				
				
				/*! Gets the value of the variable 'led_motion' that is defined in the default interface scope. */
				sc_boolean get_led_motion() const;
				
				/*! Sets the value of the variable 'led_motion' that is defined in the default interface scope. */
				void set_led_motion(sc_boolean value);
				
				
				
			private:
				friend class Lightswitch;
				static const sc_integer time_s;
				sc_boolean button_raised;
				sc_boolean motion_raised;
				sc_boolean light;
				sc_boolean led_timer;
				sc_boolean led_motion;
				Lightswitch * parent;
				
				
		};
		
		/*! Returns an instance of the interface class 'DefaultSCI'. */
		DefaultSCI* getDefaultSCI();
		
		/*! Gets the value of the variable 'time_s' that is defined in the default interface scope. */
		sc_integer get_time_s() const;
		
		/*! Raises the in event 'button' that is defined in the default interface scope. */
		void raise_button();
		
		/*! Raises the in event 'motion' that is defined in the default interface scope. */
		void raise_motion();
		
		/*! Gets the value of the variable 'light' that is defined in the default interface scope. */
		sc_boolean get_light() const;
		
		/*! Sets the value of the variable 'light' that is defined in the default interface scope. */
		void set_light(sc_boolean value);
		
		/*! Gets the value of the variable 'led_timer' that is defined in the default interface scope. */
		sc_boolean get_led_timer() const;
		
		/*! Sets the value of the variable 'led_timer' that is defined in the default interface scope. */
		void set_led_timer(sc_boolean value);
		
		/*! Gets the value of the variable 'led_motion' that is defined in the default interface scope. */
		sc_boolean get_led_motion() const;
		
		/*! Sets the value of the variable 'led_motion' that is defined in the default interface scope. */
		void set_led_motion(sc_boolean value);
		
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void init();
		
		virtual void enter();
		
		virtual void exit();
		
		virtual void runCycle();
		
		/*!
		* Checks if the state machine is active (until 2.4.1 this method was used for states).
		* A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		*/
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		virtual void setTimer(TimerInterface* timerInterface);
		
		virtual TimerInterface* getTimer();
		
		virtual void raiseTimeEvent(sc_eventid event);
		
		virtual sc_integer getNumberOfParallelTimeEvents();
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(LightswitchStates state) const;
		
		//! number of time events used by the state machine.
		static const sc_integer timeEventsCount = 2;
		
		//! number of time events that can be active at once.
		static const sc_integer parallelTimeEventsCount = 1;
		
		
	protected:
		
		
	private:
		Lightswitch(const Lightswitch &rhs);
		Lightswitch& operator=(const Lightswitch&);
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		TimerInterface* timer;
		sc_boolean timeEvents[timeEventsCount];
		
		
		LightswitchStates stateConfVector[maxOrthogonalStates];
		
		sc_ushort stateConfVectorPosition;
		
		DefaultSCI iface;
		
		// prototypes of all internal functions
		
		void enact_lightswitch_Off();
		void enact_lightswitch_Timer();
		void enact_lightswitch_Motion_Automatic();
		void enact_lightswitch_Motion_Automatic_motion_Motion();
		void enact_lightswitch_Motion_Automatic_motion_No_Motion();
		void exact_lightswitch_Timer();
		void exact_lightswitch_Motion_Automatic();
		void exact_lightswitch_Motion_Automatic_motion_Motion();
		void enseq_lightswitch_Off_default();
		void enseq_lightswitch_Timer_default();
		void enseq_lightswitch_Motion_Automatic_default();
		void enseq_lightswitch_Motion_Automatic_motion_Motion_default();
		void enseq_lightswitch_Motion_Automatic_motion_No_Motion_default();
		void enseq_lightswitch_default();
		void enseq_lightswitch_Motion_Automatic_motion_default();
		void exseq_lightswitch_Off();
		void exseq_lightswitch_Timer();
		void exseq_lightswitch_Motion_Automatic();
		void exseq_lightswitch_Motion_Automatic_motion_Motion();
		void exseq_lightswitch_Motion_Automatic_motion_No_Motion();
		void exseq_lightswitch();
		void exseq_lightswitch_Motion_Automatic_motion();
		void react_lightswitch__entry_Default();
		void react_lightswitch_Motion_Automatic_motion__entry_Default();
		sc_boolean react();
		sc_boolean lightswitch_Off_react(const sc_boolean try_transition);
		sc_boolean lightswitch_Timer_react(const sc_boolean try_transition);
		sc_boolean lightswitch_Motion_Automatic_react(const sc_boolean try_transition);
		sc_boolean lightswitch_Motion_Automatic_motion_Motion_react(const sc_boolean try_transition);
		sc_boolean lightswitch_Motion_Automatic_motion_No_Motion_react(const sc_boolean try_transition);
		void clearInEvents();
		void clearOutEvents();
		
		
		
		
};




#endif /* LIGHTSWITCH_H_ */
